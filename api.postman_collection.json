{
	"info": {
		"_postman_id": "78f8d269-7319-46ba-89c9-4c1bb9526b72",
		"name": "api",
		"description": "\\# 📦 API Postman Collection\n\n``` markdown\nEsta colección de Postman permite probar una API REST con operaciones básicas de **CRUD** sobre recursos de tipo `disks` e `instances`. Es ideal para aprender o probar endpoints de forma sencilla en un entorno local (`localhost:8080`).\n---\n## 🚀 Cómo empezar\n1. **Importa la colección** en Postman (`api.postman_collection.json`).\n2. Asegúrate de que el backend esté corriendo en `http://localhost:8080`.\n3. Abre cada petición y haz clic en **Send** para probarla.\n---\n## 📁 Endpoints disponibles\n### 🔹 Disks\n| Método | Endpoint                       | Descripción                         |\n|--------|--------------------------------|-------------------------------------|\n| GET    | `/disks?page=0&size=5`        | Obtener listado paginado de discos |\n| GET    | `/disks/{id}`                 | Obtener un disco por ID             |\n| DELETE | `/disks/{id}`                 | Eliminar un disco por ID            |\n### 🔹 Instances\n| Método | Endpoint                        | Descripción                             |\n|--------|----------------------------------|-----------------------------------------|\n| GET    | `/instances?page=0&size=5`      | Obtener listado paginado de instancias |\n| GET    | `/instances/{id}`              | Obtener una instancia por ID           |\n| DELETE | `/instances/{id}`              | Eliminar una instancia por ID          |\n| POST   | `/instances`                   | Crear una nueva instancia               |\nEjemplo de cuerpo para POST:\n```json\n{\n  \"name\": \"servidor-prueba\",\n  \"mem_size\": 16,\n  \"cores\": 8,\n  \"disk_size\": 512,\n  \"disk_type\": \"SSD\"\n}\n\n ```\n\n---\n\n## 🧪 Tests integrados\n\nCada petición incluye tests básicos en JavaScript para comprobar el estado de la respuesta:\n\n- Verifica que el código de estado sea el esperado (`200 OK`, `201 Created`, `204 No Content`, etc.).\n    \n- Puedes extender los tests desde la pestaña **Tests** de cada petición.\n    \n\n---\n\n## ⚙️ Variables disponibles\n\nLa colección incluye variables que puedes personalizar fácilmente:\n\n| Variable | Valor por defecto |\n| --- | --- |\n| `base_url` | [http://localhost:80/](http://localhost:8080/) |\n| `id` | `1` |\n\nPuedes modificar estas variables desde el entorno de Postman para adaptarlas a tu API.\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42617403"
	},
	"item": [
		{
			"name": "Get Paged Disk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:80/disks?page=0&size=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"disks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Disk ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:80/disks/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"disks",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Disk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/disks/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"disks",
						"4"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get Paged Instance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:80/instances?page=0&size=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"instances"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Get Instance ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:80/instances/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"instances",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Instance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/instances/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"instances",
						"4"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Post Instance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"servidor-prueba\",\n  \"mem_size\": 16,\n  \"cores\": 8,\n  \"disk_size\": 512,\n  \"disk_type\": \"SSD\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:80/instances/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "80",
					"path": [
						"instances",
						""
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}